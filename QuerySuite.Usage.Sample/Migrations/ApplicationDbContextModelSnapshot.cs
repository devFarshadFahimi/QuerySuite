// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuerySuite.Usage.Sample.Data;

#nullable disable

namespace QuerySuite.Usage.Sample.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Farshad",
                            LastName = "Fahimi"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Omid",
                            LastName = "Rezaei"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Nabi",
                            LastName = "Karampour"
                        });
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Title = "Book-Farshad-1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Title = "Book-Farshad-2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Title = "Book-Farshad-3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            Title = "Book-Nabi-4"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            Title = "Book-Nabi-5"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            Title = "Book-Nabi-6"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            Title = "Book-Nabi-7"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 3,
                            Title = "Book-Nabi-8"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 2,
                            Title = "Book-Omid-9"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 2,
                            Title = "Book-Omid-10"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 2,
                            Title = "Book-Omid-11"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            Title = "Book-Omid-12"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 2,
                            Title = "Book-Omid-13"
                        });
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.HasOne("Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
